<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <title>${EXAMPLE_TITLE}</title>

    <script src="${XYZ_COMMON_PATH}" type="text/javascript" charset="UTF-8"></script>
    <script src="${XYZ_CORE_PATH}" type="text/javascript" charset="UTF-8"></script>
    <script src="${XYZ_DISPLAY_PATH}" type="text/javascript" charset="UTF-8"></script>

    <style type="text/css">
        #map {
            position: absolute;
            overflow: hidden;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
<div id="map"></div>

<script type="application/javascript">
    //specify your credentials for mvt layer
    const YOUR_ACCESS_TOKEN = window.parent.YOUR_ACCESS_TOKEN;

    const baseMapLayer = new here.xyz.maps.layers.MVTLayer({
        name: 'mvt-world-layer',
        remote: {
            url: 'https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt?access_token=' + YOUR_ACCESS_TOKEN
        },
        style: {
            backgroundColor: '#ECE0CA',
            strokeWidthZoomScale: (level) => level > 17 ? 1 : level > 14 ? .5 : level > 9 ? .25 : .1,

            styleGroups: {
                'landuse': [{zIndex: 0, type: 'Polygon', fill: '#ECE0CA'}],
                'pier': [{zIndex: 1, type: 'Polygon', fill: '#ECE0CA', stroke: '#c8b89d', strokeWidth: 2}],
                'park': [{zIndex: 1, type: 'Polygon', fill: '#c8dd97'}],
                'nature_reserve': [{zIndex: 1, type: 'Polygon', fill: '#dadeb0'}],
                'hospital': [{zIndex: 1, type: 'Polygon', fill: '#f3d3d3'}],
                'water': [{zIndex: 2, type: 'Polygon', fill: 'rgb(120,188,237)'}],
                'path': [{zIndex: 3, type: 'Line', stroke: '#c8b89d', strokeWidth: 2}],
                'tunnel': [{zIndex: 3, type: 'Line', stroke: '#ffffff', strokeWidth: 14, strokeDasharray: [4, 4]}],
                'ferry': [{zIndex: 4, type: 'Line', stroke: '#164ac8', strokeWidth: 1}],
                'highway': [{zIndex: 5, type: 'Line', stroke: '#ffffff', strokeWidth: 16}],
                'boundaries': [{zIndex: 6, type: 'Line', stroke: '#b3b1ad', strokeWidth: 2}],
                'buildings': [{
                    zIndex: 7, type: 'Polygon', fill: 'rgb(155,175,196)',
                    // define extrude in meters to display polygons with extrusion
                    extrude: (feature) => feature.properties.height || 25
                }],
                'roads': [{zIndex: 4, type: 'Line', stroke: '#ffffff', strokeWidth: 4}, {
                    zIndex: 6, type: 'Text', fill: '#222222',
                    font: '12px sans-serif',
                    strokeWidth: 4,
                    stroke: 'white', text: (f) => f.properties.name,
                    // Alignment for Text. "map" aligns to the plane of the map.
                    alignment: 'map',
                    // Text with a higher priority (lower value) will be drawn before lower priorities (higher value)
                    // make sure "road labels" are drawn after "place labels".
                    priority: 2
                }],
                'places': [{
                    zIndex: 8,
                    type: 'Text',
                    text: (f) => f.properties.name,
                    stroke: 'black',
                    fill: 'white',
                    font: "18px sans-serif",
                    strokeWidth: 4,
                    // set collide property to false to enable label collision detection [default]
                    collide: false,
                    // Alignment for Text. "viewport" aligns to the plane of the viewport/screen.
                    alignment: 'viewport',
                    // Text with a higher priority (lower value) will be drawn before lower priorities (higher value)
                    // In case of "place label" and "road label" are colliding "place label" will be draw
                    // because priority 1 is smaller than priority 2
                    priority: 1
                }]
            },

            assign: (feature, zoom) => {
                let props = feature.properties;
                let kind = props.kind;
                let layer = props.layer;
                let geom = feature.geometry.type;

                if (layer == 'landuse') {
                    switch (kind) {
                        case 'pier':
                            return 'pier';
                        case 'nature_reserve':
                            return 'nature_reserve';
                        case 'park':
                        case 'garden':
                        case 'pedestrian':
                        case 'forrest':
                            return 'park';
                        case 'hospital':
                            return 'hospital';
                        default:
                            return 'landuse'
                    }
                }

                if (layer == 'water') {
                    if (geom == 'LineString' || geom == 'MultiLineString') {
                        return;
                    }
                } else if (layer == 'roads') {
                    if (kind == 'rail' || kind == 'ferry') {
                        return;
                    }
                    if (props.is_tunnel && zoom > 13) {
                        return 'tunnel';
                    }
                    if (kind == 'highway' || kind == 'path') {
                        return kind;
                    }
                }
                return layer;
            }
        }
    });

    /*###visiblesource*/
    // setup the Map Display
    const display = new here.xyz.maps.Map(document.getElementById("map"), {
        zoomLevel: 17,
        center: {
            longitude: -74.01137,
            latitude: 40.70613
        },
        behavior: {
            // allow map pitch by user interaction (mouse/touch)
            pitch: true,
            // allow map rotation by user interaction (mouse/touch)
            rotate: true
        },
        // set initial map pitch in degrees
        pitch: 50,
        // set initial map rotation in degrees
        rotate: 30,

        layers: [baseMapLayer]
    });
    /*visiblesource###*/

    // used by playground to automatically resize the map on size change
    window.display = display;
</script>
</body>
</html>
