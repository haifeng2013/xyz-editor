<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <title>${EXAMPLE_TITLE}</title>

    <script src="${XYZ_COMMON_PATH}" type="text/javascript" charset="UTF-8"></script>
    <script src="${XYZ_CORE_PATH}" type="text/javascript" charset="UTF-8"></script>
    <script src="${XYZ_DISPLAY_PATH}" type="text/javascript" charset="UTF-8"></script>


    <style type="text/css">
        #map {
            position: absolute;
            overflow: hidden;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
<div id="map"></div>

<script type="application/javascript">
    //specify your credentials for mvt and navlink layers
    var YOUR_ACCESS_TOKEN = window.parent.YOUR_ACCESS_TOKEN;

    var backgroundLayer = new here.xyz.maps.layers.MVTLayer({
        name: 'background layer',
        min: 1,
        max: 20,
        remote: {
            url: 'https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt?access_token=' + YOUR_ACCESS_TOKEN
        }
    });

    // setup the Map Display
    var display = new here.xyz.maps.Map(document.getElementById("map"), {
        zoomLevel: 17,
        center: {
            longitude: -122.254528, latitude: 37.796249
        },
        // add layers to display
        layers: []
    });

    var myLayer2 = new here.xyz.maps.layers.TileLayer({
        min: 2,
        max: 20,
        provider: new here.xyz.maps.providers.LocalProvider({}),
    });
    var myLayer3 = new here.xyz.maps.layers.TileLayer({
        min: 2,
        max: 20,
        provider: new here.xyz.maps.providers.LocalProvider({}),
    });

    // used by playground to automatically resize the map on size change
    window.display = display;
/*###visiblesource*/
// if the "zLayer" is not described explicitly in the layer styles
// the display layer order is defining the respective zLayer starting at 1.

// backgroundLayer is the first layer being added
display.addLayer(backgroundLayer);
// myLayer2 is the second layer being added
display.addLayer(myLayer2);
// myLayer3 is the third layer being added
display.addLayer(myLayer3);

// add 2 Points to the second layer "myLayer2" in the display layer order.
// first Point should rendered in red.
// the second point should be rendered in orange on top of point 1.
myLayer2.addFeature({
    type: 'Feature',
    geometry: {
        type: 'Point',
        coordinates: [-122.254528, 37.796249]
    }
},[{
    // If no zLayer is defined the zLayer depends on the display layer order.
    // Because myLayer2 is the second layer the zLayer property is automatically assigned 2
    // zLayer: 2,
    zIndex: 0, // Indicates the drawing order within a layer (relative to zLayer)
    type: 'Circle',
    radius: 32,
    fill: 'red',
    stroke: 'orange',
    strokeWidth: 3
}]);
myLayer2.addFeature({
    type: 'Feature',
    geometry: {
        type: 'Point',
        coordinates: [-122.2542, 37.796249]
    }
},[{
    zIndex: 5, // make sure orange circle is drawn on top of red circle (zIndex:0)
    type: 'Circle',
    radius: 32,
    fill: 'orange',
    stroke: 'black',
    strokeWidth: 3
}]);

// add another point to the third layer "myLayer3" in display layer order.
// The fill color should be blue and it should be displayed on top of red circle but below the orange circle.
myLayer3.addFeature({
    type: 'Feature',
    geometry:{
        type: 'Point',
        coordinates: [-122.2544, 37.7965]
    }
},[{
    zLayer: 2, // we want to "mix" data of myLayer3 within data of myLayer2
    zIndex: 3, // define to be displayed between red circle (zIndex:0) and orange circle (zIndex:5)
    type: 'Circle',
    radius: 32,
    fill: '#2284fc',
    stroke: 'white',
    strokeWidth: 3
}])

/*visiblesource###*/
</script>
</body>
</html>
